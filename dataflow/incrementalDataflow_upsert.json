{
	"name": "incrementalDataflow_upsert",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_NewFile_ADLS",
						"type": "DatasetReference"
					},
					"name": "newFileInput"
				},
				{
					"dataset": {
						"referenceName": "runningDataIncrementalLoad_DS",
						"type": "DatasetReference"
					},
					"name": "existingDatainDB"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ADF_TO_SQLDB",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_ADF_TO_SQLDB",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "addHashKeytoNewData"
				},
				{
					"name": "Join2DataSource"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          playerID as string,",
				"          Name as string,",
				"          Age as string,",
				"          Country as string,",
				"          Team as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> newFileInput",
				"source(output(",
				"          playerID as integer,",
				"          Name as string,",
				"          Age as integer,",
				"          Country as string,",
				"          Team as string,",
				"          lastModifiedDate as date,",
				"          hashKey as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> existingDatainDB",
				"newFileInput derive(hashKeyNew = toBinary(md5(Name+Country+Team)),",
				"          lastModifiedDateNew = currentDate()) ~> addHashKeytoNewData",
				"addHashKeytoNewData, existingDatainDB lookup(toInteger(newFileInput@playerID) == existingDatainDB@playerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> Join2DataSource",
				"Join2DataSource split(!isNull(existingDatainDB@playerID)&&notEquals(hashKey, toString(hashKeyNew)),",
				"     isNull(existingDatainDB@playerID),",
				"     disjoint: false) ~> split1@(Update, Insert, Default)",
				"split1@Update alterRow(upsertIf(true())) ~> alterRow1",
				"split1@Insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          playerID as integer,",
				"          Name as string,",
				"          Age as integer,",
				"          Country as string,",
				"          Team as string,",
				"          lastModifiedDate as date,",
				"          hashKey as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          playerID = split1@Insert@playerID,",
				"          Name = split1@Insert@Name,",
				"          Age = split1@Insert@Age,",
				"          Country = split1@Insert@Country,",
				"          Team = split1@Insert@Team,",
				"          lastModifiedDate = lastModifiedDateNew,",
				"          hashKey = hashKeyNew",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          playerID as integer,",
				"          Name as string,",
				"          Age as integer,",
				"          Country as string,",
				"          Team as string,",
				"          lastModifiedDate as date,",
				"          hashKey as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}